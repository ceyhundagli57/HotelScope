services:
  # MySQL Database
  database:
    image: mysql:8.0
    container_name: database
    environment:
      MYSQL_ROOT_PASSWORD: ceyhun1010
      MYSQL_DATABASE: HotelScope
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-prootceyhun1010" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    ports:
      - "3307:3306"
    volumes:
      - db_data:/var/lib/mysql

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 5s       
      timeout: 5s         
      retries: 5
  
  # ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.10
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.10
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
  api:
    build:
      context: .
      dockerfile: ApiDockerfile
    container_name: api
    ports:
      - "9999:8080"
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      elasticsearch:
        condition: service_started
  
  mvc:
    build:
      context: .
      dockerfile: WebDockerfile
    container_name: dotnet_mvc
    ports:
      - "8080:5001" # Expose MVC on port 8080
    environment:
      ASPNETCORE_URLS: "http://+:5001"
      ApiUrl: "http://api:8080" # Docker service name for the API
    depends_on:
      api:
        condition: service_started
  
  worker:
    build:
      context: .
      dockerfile: WorkerDockerfile
    container_name: worker
    environment:
      RabbitMqHost: rabbitmq
      RabbitMqUserName: guest
      RabbitMqPassword: guest
      ApiUrl: "http://api:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
volumes:
  db_data:
  es_data: